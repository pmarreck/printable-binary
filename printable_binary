#!/usr/bin/env luajit

-- PrintableBinary: A utility to encode/decode binary data into human-readable UTF-8
-- Module definition
local PrintableBinary = {}

local encode_map = {} -- number (0-255) -> string (UTF-8 bytes)
local decode_map = {} -- string (UTF-8 bytes) -> number (0-255)

-- Helper to define an encoding and its reverse mapping
local function def_char(byte_val, utf8_str)
  encode_map[byte_val] = utf8_str
  decode_map[utf8_str] = byte_val
end

local function build_maps()
  -- Control Characters (0-31)
  def_char(0, "\226\136\133") -- ∅ (U+2205)
  def_char(1, "\194\175") -- ¯ (U+00AF)
  def_char(2, "\194\171") -- « (U+00AB)
  def_char(3, "\194\187") -- » (U+00BB)
  def_char(4, "\207\158") -- ϟ (U+03DE)
  def_char(5, "\194\191") -- ¿ (U+00BF)
  def_char(6, "\194\161") -- ¡ (U+00A1)
  def_char(7, "\194\170") -- ª (U+00AA)
  def_char(8, "\226\140\171") -- ⌫ (U+232B)
  def_char(9, "\226\135\165") -- ⇥ (U+21E5)
  def_char(10, "\226\135\169") -- ⇩ (U+21E9)
  def_char(11, "\226\138\167") -- ↧ (U+21A7)
  def_char(12, "\194\167") -- § (U+00A7)
  def_char(13, "\226\143\142") -- ⏎ (U+23CE)
  def_char(14, "\200\175") -- ȯ (U+022F)
  def_char(15, "\202\152") -- ʘ (U+0298)
  def_char(16, "\198\148") -- Ɣ (U+0194)
  def_char(17, "\194\185") -- ¹ (U+00B9)
  def_char(18, "\194\178") -- ² (U+00B2)
  def_char(19, "\194\186") -- º (U+00BA)
  def_char(20, "\194\179") -- ³ (U+00B3)
  def_char(21, "\205\182") -- Ͷ (U+0376)
  def_char(22, "\201\168") -- ɨ (U+0268)
  def_char(23, "\194\172") -- ¬ (U+00AC)
  def_char(24, "\194\169") -- © (U+00A9)
  def_char(25, "\194\166") -- ¦ (U+00A6)
  def_char(26, "\198\181") -- Ƶ (U+01B5) -- Changed from 5-byte Ƶ️ to 2-byte Ƶ
  def_char(27, "\226\142\139") -- ⎋ (U+238B)
  def_char(28, "\206\158") -- Ξ (U+039E)
  def_char(29, "\199\129") -- ǁ (U+01C1)
  def_char(30, "\199\128") -- ǀ (U+01C0)
  def_char(31, "\194\182") -- ¶ (U+00B6)

  -- Special ASCII printable
  def_char(32, "\226\144\163") -- ␣ (U+2423) (Space)
  def_char(34, "\203\180")     -- ˵ (U+02F4) (Double quote)
  def_char(92, "\201\133")     -- Ʌ (U+0245) (Backslash)

  -- Standard Printable ASCII (33-126) that are not special
  for i = 33, 126 do
    if encode_map[i] == nil then -- only if not already defined
      def_char(i, string.char(i))
    end
  end

  -- DEL
  def_char(127, "\226\140\166") -- ⌦ (U+2326)

  -- Overrides for 152 and 184
  def_char(152, "\197\140") -- Ō (U+014C)
  def_char(184, "\197\143") -- ŏ (U+014F)

  -- Bytes 128-191 (Latin-1 Supplement style)
  -- Encoded as \195\byte (C3 xx), maps to U+00C0 to U+00FF
  for i = 128, 191 do
    if encode_map[i] == nil then
      def_char(i, string.char(195, i))
    end
  end

  -- Bytes 192-255
  -- Encoded as \196\( (byte - 192) + 128 ) (C4 xx), maps to U+0100 to U+013F
  for i = 192, 255 do
    if encode_map[i] == nil then
       def_char(i, string.char(196, (i - 192) + 128))
    end
  end
end

-- Call to populate the maps when the module is loaded
build_maps()

--- Encodes a single byte value (0-255) into its printable UTF-8 string representation.
-- @param byte_val An integer from 0 to 255.
-- @return The UTF-8 string representation.
function PrintableBinary.encode_byte(byte_val)
  if type(byte_val) ~= "number" or byte_val < 0 or byte_val > 255 then
    error("Invalid byte to encode: " .. tostring(byte_val), 2)
  end
  return encode_map[byte_val]
end

--- Encodes a binary string into its printable UTF-8 representation.
-- Each byte of the input string is converted.
-- @param binary_string The input string (sequence of bytes).
-- @return The printable UTF-8 encoded string.
function PrintableBinary.encode(binary_string)
  if type(binary_string) ~= "string" then
    error("Input must be a string.", 2)
  end
  local parts = {}
  for i = 1, #binary_string do
    local byte_val = string.byte(binary_string, i)
    parts[i] = encode_map[byte_val] -- Assumes build_maps has covered all 0-255
  end
  return table.concat(parts)
end

--- Decodes a printable UTF-8 string back into its original binary string.
-- @param printable_string The string encoded with PrintableBinary.encode.
-- @return The original binary string.
function PrintableBinary.decode(printable_string)
  if type(printable_string) ~= "string" then
    error("Input must be a string.", 2)
  end
  local result_bytes_as_chars = {}
  local i = 1
  local s_len = #printable_string
  while i <= s_len do
    local matched_char = nil
    -- Try to match longest first (3-byte, then 2-byte, then 1-byte).
    -- Max UTF-8 char length in our set is 3 bytes.
    for len = 3, 1, -1 do
      if i + len - 1 <= s_len then
        local sub = string.sub(printable_string, i, i + len - 1)
        if decode_map[sub] then
          table.insert(result_bytes_as_chars, string.char(decode_map[sub]))
          i = i + len
          matched_char = true
          break -- out of len loop
        end
      end
    end

    if not matched_char then
      local context_bytes = {}
      for k=0,2 do if i+k <= s_len then table.insert(context_bytes, string.format("%02X", string.byte(printable_string, i+k))) end end
      error("Invalid/unknown character sequence in input starting with byte '" ..
            string.format("%02X", string.byte(printable_string, i)) ..
            "' (context: " .. table.concat(context_bytes, " ") ..
            ") at string position " .. i .. ". Character was not in the decode list.", 2)
      -- To skip unknown character instead of erroring:
      -- i = i + 1
    end
  end
  return table.concat(result_bytes_as_chars)
end

-- When run as a script (rather than imported as a module)
if arg and arg[0] and arg[0]:match("printable_binary$") then
  -- Read from stdin if no args or if reading from pipe
  local function read_stdin()
    local chunks = {}
    local stdin = io.stdin
    local chunk = stdin:read(4096)
    while chunk do
      table.insert(chunks, chunk)
      chunk = stdin:read(4096)
    end
    return table.concat(chunks)
  end
  
  -- Read from a file
  local function read_file(file_path)
    local file, err = io.open(file_path, "rb")
    if not file then
      io.stderr:write("Error opening file: " .. err .. "\n")
      os.exit(1)
    end
    local content = file:read("*all")
    file:close()
    return content
  end
  
  -- Print usage information
  local function print_usage()
    io.write([[
Usage: printable_binary [options] [file]

Options:
  -d, --decode     Decode the input (default is to encode)
  -f, --format     Format the output with groups and line wrapping
                   Can be used with optional parameters: -f=GxL
                   Where G is group size (chars per group, default 8)
                   and L is number of groups per line (default 10)
                   Example: -f=4x16
  -h, --help       Show this help message

If no file is given, reads from standard input.
Examples:
  echo -n "Hello" | ./printable_binary
  ./printable_binary somefile.bin
  ./printable_binary -f somefile.bin         # Groups of 8, 10 groups per line
  ./printable_binary -f=4x16 somefile.bin    # Groups of 4, 16 groups per line
  ./printable_binary -d encoded_data.txt
]])
  end
  
  -- Parse command-line arguments
  local decode_mode = false
  local format_mode = false
  local format_group = 8     -- Default group size (chars per group)
  local format_groups_per_line = 10  -- Default number of groups per line
  local file_path = nil
  
  local i = 1
  while i <= #arg do
    if arg[i] == "-h" or arg[i] == "--help" then
      print_usage()
      os.exit(0)
    elseif arg[i] == "-d" or arg[i] == "--decode" then
      decode_mode = true
    elseif arg[i] == "-f" or arg[i]:match("^%-f=") or arg[i] == "--format" or arg[i]:match("^%-%-format=") then
      format_mode = true
      -- Check if there's a format specification
      local format_spec = arg[i]:match("^%-%-?f=(.+)$") or arg[i]:match("^%-%-format=(.+)$")
      if format_spec then
        local group, groups_per_line = format_spec:match("(%d+)x(%d+)")
        if group and groups_per_line then
          format_group = tonumber(group)
          format_groups_per_line = tonumber(groups_per_line)
        else
          io.stderr:write("Invalid format specification: " .. format_spec .. "\n")
          io.stderr:write("Expected format like: -f=8x10 (groups of 8 chars, 10 groups per line)\n")
          print_usage()
          os.exit(1)
        end
      end
    elseif not file_path and not arg[i]:match("^%-") then
      file_path = arg[i]
    else
      io.stderr:write("Unknown option: " .. arg[i] .. "\n")
      print_usage()
      os.exit(1)
    end
    i = i + 1
  end
  
  -- Read input data
  local input_data
  if file_path then
    input_data = read_file(file_path)
  else
    input_data = read_stdin()
  end
  
  -- Process data according to mode
  local output
  if decode_mode then
    -- When decoding, first remove any spaces and newlines if they're present
    -- This allows users to decode formatted output by copy-pasting it
    local cleaned_input = input_data:gsub("[ \t\r\n]", "")
    output = PrintableBinary.decode(cleaned_input)
  else
    output = PrintableBinary.encode(input_data)
    
    -- Apply formatting if requested
    if format_mode and not decode_mode then
      local formatted_output = {}
      local char_count = 0
      local chars_in_group = 0
      local groups_in_line = 0
      
      -- We need to handle UTF-8 characters properly
      -- For each input byte, we have a corresponding UTF-8 output character
      -- So we can simply iterate through the input length to know how many
      -- "logical" characters we have in the output
      local original_len = #input_data
      
      for i = 1, original_len do
        -- Get the encoded character for this position
        -- and add it to the formatted output
        local encoded_char = encode_map[string.byte(input_data, i)]
        table.insert(formatted_output, encoded_char)
        chars_in_group = chars_in_group + 1
        
        -- When we complete a group, add a space (unless it's the last group in a line)
        if chars_in_group == format_group then
          -- Add space after each group, unless we're at the end
          if i < original_len then
            table.insert(formatted_output, " ")
          end
          
          chars_in_group = 0
          groups_in_line = groups_in_line + 1
          
          -- If we've hit our groups per line limit, add a newline
          if groups_in_line == format_groups_per_line and i < original_len then
            table.insert(formatted_output, "\n")
            groups_in_line = 0
          end
        end
      end
      
      output = table.concat(formatted_output)
    end
  end
  
  -- Write result to stdout (in binary mode if decoding)
  if decode_mode then
    io.stdout:write(output)
  else
    io.write(output)
  end
end

return PrintableBinary
