#!/bin/bash
# Fuzz test for printable_binary
# Tests encoding/decoding of large random binary data

set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

SCRIPT="./printable_binary"
TEST_SIZE_MB=1
TEST_SIZE_BYTES=$((TEST_SIZE_MB * 1024 * 1024))

# Now try with real random data
SIMPLE_TEST=false

echo -e "${BLUE}=== PrintableBinary Fuzz Test ===${NC}"
echo -e "Testing with ${TEST_SIZE_MB}MB of random data..."

# Create temporary files
RANDOM_DATA=$(mktemp)
ENCODED_DATA=$(mktemp)
DECODED_DATA=$(mktemp)

# Cleanup function
cleanup() {
    echo -e "Cleaning up temporary files..."
    rm -f "$RANDOM_DATA" "$ENCODED_DATA" "$DECODED_DATA"
}
trap cleanup EXIT

# If in simple test mode, use a more predictable test pattern
if [ "$SIMPLE_TEST" = true ]; then
  echo -e "${YELLOW}Using simple test pattern (0-255)...${NC}"
  # Create a simple test pattern with all byte values 0-255
  for i in {0..255}; do
    printf "\\$(printf '%03o' $i)" >> "$RANDOM_DATA"
  done
else
  # Generate random data - using /dev/urandom for speed
  echo -e "${YELLOW}Generating ${TEST_SIZE_MB}MB of random data...${NC}"
  dd if=/dev/urandom of="$RANDOM_DATA" bs=1M count="$TEST_SIZE_MB" 2>/dev/null
fi

# Calculate hash of the original data
echo -e "${YELLOW}Calculating hash of original data...${NC}"
ORIGINAL_HASH=$(shasum -a 256 "$RANDOM_DATA" | cut -d ' ' -f 1)
echo "Original hash: $ORIGINAL_HASH"

# Encode the data
echo -e "${YELLOW}Encoding data...${NC}"
time $SCRIPT "$RANDOM_DATA" > "$ENCODED_DATA"
ENCODED_SIZE=$(wc -c < "$ENCODED_DATA")
ENCODED_SIZE_MB=$(echo "scale=2; $ENCODED_SIZE / (1024*1024)" | bc)
echo "Encoded size: ${ENCODED_SIZE_MB}MB (${ENCODED_SIZE} bytes)"

# Debug the encoded data
echo -e "${YELLOW}Examining encoded data...${NC}"
head -c 100 "$ENCODED_DATA" | hexdump -C

# For simple test, show the encoded data
if [ "$SIMPLE_TEST" = true ]; then
  echo -e "\nEncoded data (first 100 bytes):"
  head -c 100 "$ENCODED_DATA" | hexdump -C
fi

# Calculate compression ratio
RATIO=$(echo "scale=2; $ENCODED_SIZE / $TEST_SIZE_BYTES" | bc)
echo "Encoding ratio: ${RATIO}x"

# Decode the data
echo -e "${YELLOW}Decoding data...${NC}"
echo -e "${YELLOW}Running: $SCRIPT -d $ENCODED_DATA > $DECODED_DATA${NC}"

# For debugging, let's also use cat directly to check what's in the encoded file
echo "First few lines of encoded data:"
head -n 2 "$ENCODED_DATA" | hexdump -C

time $SCRIPT -d "$ENCODED_DATA" > "$DECODED_DATA"

# For simple test, show the decoded data
if [ "$SIMPLE_TEST" = true ]; then
  echo -e "\nDecoded data (first 40 bytes):"
  head -c 40 "$DECODED_DATA" | hexdump -C
  
  # Check the file size
  DECODED_SIZE=$(wc -c < "$DECODED_DATA")
  echo -e "\nDecoded file size: ${DECODED_SIZE} bytes (should be 256 bytes)"
  
  # Check for specific byte values at key positions
  echo -e "\nChecking specific decoded bytes:"
  for pos in 32 33 34 35; do
    if [ $pos -lt $DECODED_SIZE ]; then
      BYTE=$(dd if="$DECODED_DATA" bs=1 skip=$pos count=1 2>/dev/null | hexdump -ve '1/1 "0x%02X"')
      echo "Position $pos: $BYTE (expected: 0x$(printf '%02X' $pos))"
    else
      echo "Position $pos: Not enough bytes in decoded file"
    fi
  done
fi

# Calculate hash of the decoded data
echo -e "${YELLOW}Calculating hash of decoded data...${NC}"
DECODED_HASH=$(shasum -a 256 "$DECODED_DATA" | cut -d ' ' -f 1)
echo "Decoded hash: $DECODED_HASH"

# Compare hashes
if [ "$ORIGINAL_HASH" = "$DECODED_HASH" ]; then
    echo -e "${GREEN}TEST PASSED: Hashes match!${NC}"
    echo "The encoding/decoding process perfectly preserved the data."
else
    echo -e "${RED}TEST FAILED: Hashes don't match!${NC}"
    echo "Original: $ORIGINAL_HASH"
    echo "Decoded: $DECODED_HASH"
    
    # Add additional diagnostics
    ORIGINAL_SIZE=$(wc -c < "$RANDOM_DATA")
    DECODED_SIZE=$(wc -c < "$DECODED_DATA")
    echo "Original size: $ORIGINAL_SIZE bytes"
    echo "Decoded size: $DECODED_SIZE bytes"
    
    if [ "$ORIGINAL_SIZE" != "$DECODED_SIZE" ]; then
        echo -e "${RED}Size mismatch detected!${NC}"
    else
        echo "File sizes match - content differs"
        
        # Find the first byte that differs
        cmp -l "$RANDOM_DATA" "$DECODED_DATA" | head -n 1
        
        # Show a hex dump of the first few bytes of each file
        echo -e "\nFirst 32 bytes of original:"
        hexdump -C "$RANDOM_DATA" | head -n 2
        echo -e "\nFirst 32 bytes of decoded:"
        hexdump -C "$DECODED_DATA" | head -n 2
    fi
    
    exit 1
fi

echo -e "\n${BLUE}All tests completed successfully.${NC}"