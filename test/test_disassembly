#!/usr/bin/env bash
# Disassembly test for printable_binary
# Tests the -a/--asm functionality with various architectures

set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Path to the printable_binary script (can be overridden with IMPLEMENTATION_TO_TEST)
# Auto-detect the correct path based on script location
SCRIPT_DIR="$(dirname "$0")"
DEFAULT_IMPLEMENTATION="$SCRIPT_DIR/../printable_binary"
SCRIPT="${IMPLEMENTATION_TO_TEST:-$DEFAULT_IMPLEMENTATION}"

# Create temp files for testing
TMP_DIR=$(mktemp -d)
TMP_X64_BIN="$TMP_DIR/test_x64.bin"
TMP_ARM64_BIN="$TMP_DIR/test_arm64.bin"
TMP_X32_BIN="$TMP_DIR/test_x32.bin"
TMP_DISASM_OUTPUT="$TMP_DIR/disasm_output.txt"
TMP_DECODED="$TMP_DIR/decoded.bin"

# Cleanup function
cleanup() {
    rm -rf "$TMP_DIR"
}
trap cleanup EXIT

echo -e "${BLUE}=== PrintableBinary Disassembly Test Suite ===${NC}"
echo -e "${YELLOW}Testing implementation: $SCRIPT${NC}"

# Check if cstool is available
if ! command -v cstool &> /dev/null; then
    echo -e "${RED}SKIP: cstool (Capstone) not available - disassembly tests cannot run${NC}"
    exit 0
fi

###############################################################################
# BASIC DISASSEMBLY TESTS (CAPSTONE)
###############################################################################

echo -e "\n${YELLOW}Running basic capstone disassembly tests...${NC}"

# Test 1: x64 capstone disassembly
echo -e "${BLUE}Test #1: x64 capstone disassembly${NC}"
# Create simple x64 assembly: mov rbp, rsp; sub rsp, 0x10
echo -e "\x48\x89\xe5\x48\x83\xec\x10" > "$TMP_X64_BIN"

# Test with explicit architecture
$SCRIPT -a --arch=x64 "$TMP_X64_BIN" > "$TMP_DISASM_OUTPUT" 2>/dev/null
if grep -q "mov.*rbp.*rsp" "$TMP_DISASM_OUTPUT" && grep -q "sub.*rsp" "$TMP_DISASM_OUTPUT"; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Expected x64 disassembly not found${NC}"
    echo "Output was:"
    cat "$TMP_DISASM_OUTPUT"
    exit 1
fi

# Test 2: Verify capstone disassembly output can be decoded (not perfect round-trip by design)
echo -e "${BLUE}Test #2: Capstone disassembly output decodable${NC}"
$SCRIPT -d "$TMP_DISASM_OUTPUT" > "$TMP_DECODED" 2>/dev/null
if [ -s "$TMP_DECODED" ]; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Disassembly output cannot be decoded at all${NC}"
    exit 1
fi

# Test 3: ARM64 capstone disassembly
echo -e "${BLUE}Test #3: ARM64 capstone disassembly${NC}"
# Create simple ARM64 assembly: mov x0, #42; ret
echo -e "\x40\x05\x80\xd2\xc0\x03\x5f\xd6" > "$TMP_ARM64_BIN"

$SCRIPT -a --arch=arm64 "$TMP_ARM64_BIN" > "$TMP_DISASM_OUTPUT" 2>/dev/null
if grep -q "mov.*x0.*#0x2a\|mov.*x0.*#42" "$TMP_DISASM_OUTPUT" && grep -q "ret" "$TMP_DISASM_OUTPUT"; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Expected ARM64 disassembly not found${NC}"
    echo "Output was:"
    cat "$TMP_DISASM_OUTPUT"
    exit 1
fi

# Test 4: x32 capstone disassembly
echo -e "${BLUE}Test #4: x32 capstone disassembly${NC}"
# Create simple x32 assembly: mov ebp, esp; sub esp, 0x10
echo -e "\x89\xe5\x83\xec\x10" > "$TMP_X32_BIN"

$SCRIPT -a --arch=x32 "$TMP_X32_BIN" > "$TMP_DISASM_OUTPUT" 2>/dev/null
if grep -q "mov.*ebp.*esp" "$TMP_DISASM_OUTPUT" && grep -q "sub.*esp" "$TMP_DISASM_OUTPUT"; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Expected x32 disassembly not found${NC}"
    echo "Output was:"
    cat "$TMP_DISASM_OUTPUT"
    exit 1
fi

# Test 5: Auto-detection
echo -e "${BLUE}Test #5: Architecture auto-detection${NC}"
$SCRIPT -a "$TMP_X64_BIN" > "$TMP_DISASM_OUTPUT" 2>&1
if grep -q "Auto-detected\|Detected.*architecture\|Using.*architecture" "$TMP_DISASM_OUTPUT"; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - No architecture detection output found${NC}"
    echo "Output was:"
    cat "$TMP_DISASM_OUTPUT"
    exit 1
fi

# Test 6: Invalid architecture handling
echo -e "${BLUE}Test #6: Invalid architecture handling${NC}"
if $SCRIPT -a --arch=invalid "$TMP_X64_BIN" 2>/dev/null; then
    echo -e "${GREEN}PASS - Invalid architecture handled gracefully${NC}"
else
    echo -e "${GREEN}PASS - Invalid architecture rejected as expected${NC}"
fi

###############################################################################
# SMART DISASSEMBLY TESTS (OBJDUMP)
###############################################################################

echo -e "\n${YELLOW}Running smart disassembly (objdump) tests...${NC}"

# Check if objdump is available
if ! command -v objdump &> /dev/null; then
    echo -e "${RED}SKIP: objdump not available - smart disassembly tests cannot run${NC}"
else
    # Test 7: Smart disassembly with executable file
    echo -e "${BLUE}Test #7: Smart disassembly with /bin/ls${NC}"
    if [ -f "/bin/ls" ]; then
        $SCRIPT --smart-asm "/bin/ls" > "$TMP_DISASM_OUTPUT" 2>&1
        if grep -q "ðŸ§¾" "$TMP_DISASM_OUTPUT" && [ -s "$TMP_DISASM_OUTPUT" ]; then
            echo -e "${GREEN}PASS${NC}"
        else
            echo -e "${RED}FAIL - Smart disassembly failed${NC}"
            echo "Output was:"
            cat "$TMP_DISASM_OUTPUT"
            exit 1
        fi

        # Test 8: Smart disassembly output decodable
        echo -e "${BLUE}Test #8: Smart disassembly output decodable${NC}"
        $SCRIPT -d "$TMP_DISASM_OUTPUT" > "$TMP_DECODED" 2>/dev/null
        if [ -s "$TMP_DECODED" ]; then
            echo -e "${GREEN}PASS${NC}"
        else
            echo -e "${RED}FAIL - Smart disassembly output cannot be decoded at all${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}SKIP: Test #7 and #8 - /bin/ls not available${NC}"
    fi

    # Test 9: Smart disassembly error handling (conflicting options)
    echo -e "${BLUE}Test #9: Smart disassembly conflicting options${NC}"
    if $SCRIPT -a --smart-asm "$TMP_X64_BIN" 2>/dev/null; then
        echo -e "${RED}FAIL - Should reject conflicting --asm and --smart-asm options${NC}"
        exit 1
    else
        echo -e "${GREEN}PASS - Correctly rejected conflicting options${NC}"
    fi

    # Test 10: Smart disassembly requires file input
    echo -e "${BLUE}Test #10: Smart disassembly requires file input${NC}"
    if echo "test" | $SCRIPT --smart-asm 2>/dev/null; then
        echo -e "${RED}FAIL - Should require file input for smart disassembly${NC}"
        exit 1
    else
        echo -e "${GREEN}PASS - Correctly requires file input${NC}"
    fi
fi

###############################################################################
# INTEGRATION TESTS
###############################################################################

echo -e "\n${YELLOW}Running integration tests...${NC}"

# Test 11: Capstone disassembly with formatting
echo -e "${BLUE}Test #11: Capstone disassembly with formatting${NC}"
$SCRIPT -a -f=4x8 --arch=x64 "$TMP_X64_BIN" > "$TMP_DISASM_OUTPUT" 2>/dev/null
if grep -q "mov.*rbp.*rsp" "$TMP_DISASM_OUTPUT"; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Formatted disassembly failed${NC}"
    exit 1
fi

# Test 12: Verify formatted capstone disassembly is decodable
echo -e "${BLUE}Test #12: Formatted capstone disassembly decodable${NC}"
$SCRIPT -d "$TMP_DISASM_OUTPUT" > "$TMP_DECODED" 2>/dev/null
if [ -s "$TMP_DECODED" ]; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Formatted disassembly output cannot be decoded at all${NC}"
    exit 1
fi

# Test 13: Large binary capstone disassembly (if /bin/ls exists)
if [ -f "/bin/ls" ]; then
    echo -e "${BLUE}Test #13: Large binary capstone disassembly${NC}"
    $SCRIPT -a "/bin/ls" > "$TMP_DISASM_OUTPUT" 2>&1
    if grep -q "architecture" "$TMP_DISASM_OUTPUT" && [ -s "$TMP_DISASM_OUTPUT" ]; then
        echo -e "${GREEN}PASS${NC}"
    else
        echo -e "${RED}FAIL - Large binary disassembly failed${NC}"
        exit 1
    fi

    # Test 14: Large binary capstone disassembly decodable
    echo -e "${BLUE}Test #14: Large binary capstone disassembly decodable${NC}"
    $SCRIPT -d "$TMP_DISASM_OUTPUT" > "$TMP_DECODED" 2>/dev/null
    if [ -s "$TMP_DECODED" ]; then
        echo -e "${GREEN}PASS${NC}"
    else
        echo -e "${RED}FAIL - Large binary disassembly output cannot be decoded at all${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}SKIP: Test #13 and #14 - /bin/ls not available${NC}"
fi

###############################################################################
# OUTPUT FORMAT TESTS
###############################################################################

echo -e "\n${YELLOW}Running output format tests...${NC}"

# Test 15: Verify capstone disassembly section separator
echo -e "${BLUE}Test #15: Capstone disassembly section separator${NC}"
$SCRIPT -a --arch=x64 "$TMP_X64_BIN" > "$TMP_DISASM_OUTPUT" 2>/dev/null
if grep -q "ðŸ§¾\|Disassembly" "$TMP_DISASM_OUTPUT"; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - No disassembly section separator found${NC}"
    exit 1
fi

# Test 16: Verify both encoded data and capstone disassembly are present
echo -e "${BLUE}Test #16: Both encoded data and capstone disassembly present${NC}"
$SCRIPT -a --arch=x64 "$TMP_X64_BIN" > "$TMP_DISASM_OUTPUT" 2>/dev/null
ENCODED_LINES=$(grep -v "^#\|^$\|ðŸ§¾\|Disassembly\|mov\|sub\|ret\|add\|push\|pop" "$TMP_DISASM_OUTPUT" | wc -l)
DISASM_LINES=$(grep -E "mov|sub|ret|add|push|pop" "$TMP_DISASM_OUTPUT" | wc -l)

if [ "$DISASM_LINES" -gt 0 ]; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Missing disassembly ($DISASM_LINES lines)${NC}"
    exit 1
fi

###############################################################################
# ERROR HANDLING TESTS
###############################################################################

echo -e "\n${YELLOW}Running error handling tests...${NC}"

# Test 17: Non-executable file capstone disassembly
echo -e "${BLUE}Test #17: Non-executable file capstone disassembly${NC}"
echo "Hello World" > "$TMP_DIR/text_file.txt"
$SCRIPT -a --arch=x64 "$TMP_DIR/text_file.txt" > "$TMP_DISASM_OUTPUT" 2>/dev/null
# Should still work (disassemble as data), just might not make sense
if [ -s "$TMP_DISASM_OUTPUT" ]; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Should handle non-executable files${NC}"
    exit 1
fi

# Test 18: Empty file capstone disassembly
echo -e "${BLUE}Test #18: Empty file capstone disassembly${NC}"
touch "$TMP_DIR/empty_file"
$SCRIPT -a --arch=x64 "$TMP_DIR/empty_file" > "$TMP_DISASM_OUTPUT" 2>/dev/null
if [ -f "$TMP_DISASM_OUTPUT" ]; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Should handle empty files${NC}"
    exit 1
fi

# Test 19: Verify capstone disassembly only outputs disassembly format (no pure binary)
echo -e "${BLUE}Test #19: Capstone disassembly only outputs disassembly format${NC}"
$SCRIPT -a --arch=x64 "$TMP_X64_BIN" > "$TMP_DISASM_OUTPUT" 2>/dev/null
# All lines should either be comments (#), contain receipt emoji (ðŸ§¾), or be empty
# No lines should contain pure encoded binary without disassembly formatting
PURE_BINARY_LINES=$(grep -v "^#\|ðŸ§¾\|^$\|architecture\|Using\|Auto-detected\|Detected" "$TMP_DISASM_OUTPUT" | wc -l)
if [ "$PURE_BINARY_LINES" -eq 0 ]; then
    echo -e "${GREEN}PASS${NC}"
else
    echo -e "${RED}FAIL - Found $PURE_BINARY_LINES lines of pure binary data (should be 0)${NC}"
    echo "Pure binary lines found:"
    grep -v "^#\|ðŸ§¾\|^$\|architecture\|Using\|Auto-detected\|Detected" "$TMP_DISASM_OUTPUT" | head -5
    exit 1
fi

# Test 20: Verify smart disassembly only outputs disassembly format (no pure binary)
if command -v objdump &> /dev/null; then
    echo -e "${BLUE}Test #20: Smart disassembly only outputs disassembly format${NC}"
    if [ -f "/bin/ls" ]; then
        $SCRIPT --smart-asm "/bin/ls" > "$TMP_DISASM_OUTPUT" 2>/dev/null
        # All lines should either be comments (#), contain receipt emoji (ðŸ§¾), or be empty
        # No lines should contain pure encoded binary without disassembly formatting
        PURE_BINARY_LINES=$(grep -v "^#\|ðŸ§¾\|^$\|Smart disassembly\|format-aware" "$TMP_DISASM_OUTPUT" | wc -l)
        if [ "$PURE_BINARY_LINES" -eq 0 ]; then
            echo -e "${GREEN}PASS${NC}"
        else
            echo -e "${RED}FAIL - Found $PURE_BINARY_LINES lines of pure binary data (should be 0)${NC}"
            echo "Pure binary lines found:"
            grep -v "^#\|ðŸ§¾\|^$\|Smart disassembly\|format-aware" "$TMP_DISASM_OUTPUT" | head -5
            exit 1
        fi
    else
        echo -e "${YELLOW}SKIP: Test #20 - /bin/ls not available${NC}"
    fi
else
    echo -e "${YELLOW}SKIP: Test #20 - objdump not available${NC}"
fi

echo -e "\n${GREEN}All disassembly tests passed!${NC}"
echo -e "${BLUE}Summary:${NC}"
echo -e "  âœ“ Basic capstone disassembly (x64, ARM64, x32)"
echo -e "  âœ“ Smart objdump disassembly (when available)"
echo -e "  âœ“ Architecture auto-detection"
echo -e "  âœ“ Disassembly output is decodable (not perfect round-trip by design)"
echo -e "  âœ“ Formatted output with disassembly"
echo -e "  âœ“ Large binary handling"
echo -e "  âœ“ Output format verification"
echo -e "  âœ“ Error handling"
echo -e "  âœ“ Option validation"
