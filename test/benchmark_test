#!/bin/bash
# Benchmark script for printable_binary performance

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== PrintableBinary Performance Benchmark ===${NC}"

# Path to the printable_binary script (can be overridden with IMPLEMENTATION_TO_TEST)
# Auto-detect the correct path based on script location
SCRIPT_DIR="$(dirname "$0")"
DEFAULT_IMPLEMENTATION="$SCRIPT_DIR/../printable_binary"
SCRIPT="${IMPLEMENTATION_TO_TEST:-$DEFAULT_IMPLEMENTATION}"
echo -e "${YELLOW}Testing implementation: $SCRIPT${NC}"

# Test sizes
SIZES=("1MB" "5MB" "10MB")
MB_SIZES=(1 5 10)

# Create temporary files for testing
RANDOM_DATA=$(mktemp)
ENCODED_DATA=$(mktemp)
DECODED_DATA=$(mktemp)

# Cleanup function
cleanup() {
    echo "Cleaning up temporary files..."
    rm -f "$RANDOM_DATA" "$ENCODED_DATA" "$DECODED_DATA"
}
trap cleanup EXIT

for i in "${!SIZES[@]}"; do
    SIZE=${SIZES[$i]}
    MB=${MB_SIZES[$i]}
    BYTES=$((MB * 1024 * 1024))
    
    echo -e "\n${YELLOW}Testing with $SIZE of random data...${NC}"
    
    # Generate random data
    echo -e "${YELLOW}Generating $SIZE of random data...${NC}"
    dd if=/dev/urandom of="$RANDOM_DATA" bs=1M count="$MB" 2>/dev/null
    
    # Measure encoding performance
    echo -e "${YELLOW}Benchmarking encoding...${NC}"
    ENCODE_START=$(date +%s.%N)
    $SCRIPT "$RANDOM_DATA" > "$ENCODED_DATA"
    ENCODE_END=$(date +%s.%N)
    ENCODE_TIME=$(echo "$ENCODE_END - $ENCODE_START" | bc)
    ENCODE_RATE=$(echo "scale=2; $BYTES / $ENCODE_TIME / 1024 / 1024" | bc)
    
    ENCODED_SIZE=$(wc -c < "$ENCODED_DATA")
    ENCODED_SIZE_MB=$(echo "scale=2; $ENCODED_SIZE / (1024*1024)" | bc)
    RATIO=$(echo "scale=2; $ENCODED_SIZE / $BYTES" | bc)
    
    echo -e "Encoded $MB MB in $ENCODE_TIME seconds ($ENCODE_RATE MB/s)"
    echo -e "Encoded size: $ENCODED_SIZE_MB MB ($ENCODED_SIZE bytes)"
    echo -e "Encoding ratio: ${RATIO}x"
    
    # Measure decoding performance
    echo -e "${YELLOW}Benchmarking decoding...${NC}"
    DECODE_START=$(date +%s.%N)
    $SCRIPT -d "$ENCODED_DATA" > "$DECODED_DATA"
    DECODE_END=$(date +%s.%N)
    DECODE_TIME=$(echo "$DECODE_END - $DECODE_START" | bc)
    DECODE_RATE=$(echo "scale=2; $ENCODED_SIZE / $DECODE_TIME / 1024 / 1024" | bc)
    
    echo -e "Decoded $ENCODED_SIZE_MB MB in $DECODE_TIME seconds ($DECODE_RATE MB/s)"
    
    # Verify correct operation
    if cmp -s "$RANDOM_DATA" "$DECODED_DATA"; then
        echo -e "${GREEN}Verification: PASS - Data correctly roundtripped${NC}"
    else
        echo -e "${RED}Verification: FAIL - Data corruption detected${NC}"
        exit 1
    fi
done

echo -e "\n${BLUE}Benchmark completed successfully${NC}"